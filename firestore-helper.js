const CommentHelper = require('./createCommentObj');
const moment = require('moment');
const firestore = require('@google-cloud/firestore');

async function initializeDb(db, userId) {
  // Checking to see if user exists and getting their ID to be used for referencing when adding a new comment
  const users = db.collection("users");

  const userDocId = await getUser(users, userId)
    .catch((error) => {
      console.error(`Error in getting current user's Document reference -> ${error}`);
      return null;
    });

  // Check user's collection of websites 
  if (userDocId) {
    let userDocRef = users.doc(userDocId);
    let userDocData = (await userDocRef.get()).data();

    return { userDocId, userDocData };
  }
  else {
    console.error(`Error in retriving user data.`);
  }
}

// Retriving Document ID of current user
async function getUser(users, userId) {
  let docId = null;
  let querySnapshot = await users.where("userId", "==", userId).get()
    .catch(function(error) {
      console.error(`Error in searching for user in database -> ${error}`);
    });

  // Should only return one user
  if (!querySnapshot.empty){
    querySnapshot.forEach(doc => {
      docId = doc.id;
      console.log()
      return docId;
    });

  }
  else {
    // Creating new user
    const newUserDoc = await users.add({
      userId: userId,
      userName: userId,
    });

    docId = newUserDoc.id;
    console.log(`New user created: ${userId}`);
  }

  return docId;
}

async function getComments(db, userData, website) {
  // Checks which website they are on and pull comments 
  let commentList = [];
  const users = db.collection("users");

  let allCommentsFromDb = await users.doc(userData.userDocId)
    .collection("websites")
    .doc(website)
    .collection("comments")
    .orderBy('timestamp','desc')
    .get();

  // Retrieve all comments sorted by their timestamps in descending order (i.e. most recent displayed on top)
  allCommentsFromDb.forEach((doc) => {
    let commentListItem = CommentHelper.createCommentObj (
      doc.id, 
      userData.userId, 
      userData.userName,
      doc.data().message, 
      moment(doc.data().timestamp.toMillis()).format('lll') // Format e.g. Aug 17, 2020 3:42 PM
    );
    
    commentList.push(commentListItem);
  });

  return commentList;
}

// Generates a new, unique Firestore Document ID for newly added comments
async function getNewCommentId(db, userData, website) {
  const users = db.collection("users");
  const commentId = await users.doc(userData.userDocId)
    .collection("websites")
    .doc(website)
    .collection("comments")
    .doc().id;
  return commentId;
}

async function saveComment(db, userData, website, commentId, message) {
  if (message) {
    const users = db.collection("users");
    const currentTimestamp = firestore.Timestamp.now();

    // No need to save ID because it's automatically generated by Firestore as the key, which is what is used to identify each unique comment
    // If Document doesn't exist, Firestore creates a new document
    await users.doc(userData.userDocId)
      .collection("websites")
      .doc(website)
      .collection("comments")
      .doc(commentId)
      .set({
        userId: userData.userId,
        userName: userData.userName,
        message: message,
        timestamp: currentTimestamp
      })
      .catch((error) => {
        console.error(`Error in adding new comment: ${error}`);
        return false;
      });
    return { commentId: commentId, timestamp: currentTimestamp.toMillis() } ;
  }
  else {
    console.log(`No message to be saved.`);
    return false;
  }
}

async function deleteComment(db, userData, website, commentId) {
  const users = db.collection("users");

  let commentRef = await users.doc(userData.userDocId)
    .collection("websites")
    .doc(website)
    .collection("comments")
    .doc(commentId)
    .get()
    .catch((error) => {
      console.error(`Error in retrieving document to be deleted -> ${error}`);
    });
    
  if (commentRef) {
    await users.doc(userData.userDocId)
      .collection("websites")
      .doc(website)
      .collection("comments")
      .doc(commentId)
      .delete()
      .catch((error) => {
        console.error(`Error in deleting document from database -> ${error}`);
      });
  }
}


module.exports = { initializeDb, getComments, getNewCommentId, saveComment, deleteComment };